#!/bin/bash


#!!!!!!!!!!!!!!!!!!!!!!!! INCOMPLETE WORK IN PROGRESS !!!!!!!!!!!!!!!!!!!!!!!!


#==============================================================================
#
#       FILE:           BackupJobs
#
#       USAGE:
#
#       DESCRIPTION:    Runs various local, cloud and system backups
#
#       DEPENDENCIES:   rclone, rsync
#       
#       AUTHOR:         Charl Potgieter
#
#==============================================================================

# !!!!!!!!!!!!!!!!!!!!!!!!! TO DO !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
#
# (0) Work on passing exclusions saved as a variable to rsync (see test_sub)
# (1) Carefully check all paramaters in system mirror before running 
# (2) Send any errors to stderr rather than just echo
# (3) Move backup exclusions to config fike
# (4) Move size exclusiont to config file
# (5) Move encrypt exclusion to config file
# (6) Add any new compulsory configs to check_config function
#
#
# !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!


#BACKUP_EXCLUDES=()
#exclude () {
#        while (( $# )) do
#                BACKUP_EXCLUDES+=(--exclude="$1")
#                shift
#        done
#}

# exclude /proc /dev /mnt /media
# exclude "/lost+found"
# rsync -ruvz "${BACKUP_EXCLUDES[@]}" / /some/backup/path


#====FUNCTION==================================================================
#       Name:           list_to_array
#       Description:    converts comma seperated list to array
#       Paramater 1:    comma seperated string to be converted
#       Returns:        array is passed as stdout
#==============================================================================

#list_to_array() {
#
#        # This function is created to work around fact that brace expansion
#        # takes place before variable expansion so including a variable inside
#        # braces does not work.  As an alternative an array can be passed as
#        # paramater
#
#
#        # replace comma seperated list wth spaces (first save $1 into a
#        # seperate variable as I can't get comma space substition working
#        # with 1.  Bash thinks this is a number rather than a variable?
#        # ($1 represents paramater passed to function)
#        comma_seperated_list=$1
#        space_seperated_list=${comma_seperated_list//,/ }                
#
#        args=()
#        for  i in $space_seperated_list; do
#                args+=( "$i" )
#        done
#       
#        #return the array via stdout 
#        echo  "${args[@]}"
#
#}




#====FUNCTION==================================================================
#       Name:           read_config
#       Description:    Reads configuration from ~/.backup_overnight.conf
#       Paramaters:     None
#       Returns:        None
#==============================================================================

#read_config() {
#
#        ConfigFile="/srv/samba/Documents_Charl/Computer_Technical/Programming_Complete/Bash/backup_overnight/backup_overnight.conf"
#        
#              
#        # read config file into array which has been initialised in main
#        while read line
#        do
#                if echo $line | grep -F = &>/dev/null
#                then
#                        varname=$(echo "$line" | cut -d '=' -f 1)
#                        config[$varname]=$(echo "$line" | cut -d '=' -f 2-)
#                fi
#        done < $ConfigFile
#        
#}
#
#
#
#
##====FUNCTION==================================================================
##       Name:           check_config
##       Description:    Checks for missing configuration variables
##       Paramaters:     None
##       Returns:        None
##==============================================================================
#
#check_config() {
#
## Ensures there are no missing config path paramaters as this could have 
## unwanted impacts e.g. if rsync attempts to copy to an empty path
#
#
#        CompulsoryConfigs=("LogPath" \
#                "OS_SourcePath" \
#                "OS_DestinationPath" \
#                "OS_TarDestinationPath" \
#                "MirrorSourcePath" \
#                "MirrorDestinationPath" \
#                "CloudExclusionFile" \
#                "CloudCopySourcePath" \
#                "CloudCopyDestinationPath" \
#                "CloudMirrorSourcePath" \
#                "CloudMirrorDestinationPath")
#
#        MissingConfigs=()
#
#        for k in ${CompulsoryConfigs[@]}; do
#                if [ -z "${config[$k]}" ]; then
#                        MissingConfigs+=($k)
#                fi
#        done
#        
#        if [ ${#MissingConfigs[@]} -gt 0 ]; then
#                echo "Missing keys are: "
#                printf "%s\t" "${MissingConfigs[@]}"
#                echo ""
#                exit 1
#        fi
#
#}
#


#====FUNCTION==================================================================
#       Name:           system_backup
#       Description:    Create a system mirror (excluding data)

#       Paramaters:     None
#       Returns:        None
#==============================================================================

system_mirror() {
     
        Log="$LogPath/$date.ArchServerBackupLog.txt"
        ErrorLog="$LogPath/$date.ArchServerBackupErrorLog.txt"

        # Create an exclusion array.  Variable expanstion takes place after
        # brace expanion so can't use a brace expansion solution
        excl_array=()
        for  i in $OS_Exclusions; do
                excl_array+=(--exclude="$i" )
        done

        #!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! ADD BACK THE --delete flag !!!!!!!!!!!!!!!!!!!!!!!!!! 
#        rsync -aAXv  "${excl_array[@]}" \
#                $OS_SourcePath $OS_DestinationPath \
#                >$Log 2>$ErrorLog
}





#====FUNCTION==================================================================
#       Name:           system_tarball
#       Description:    Mirror system as a tarball (excluding data)
#       Paramaters:     None
#       Returns:        None
#==============================================================================

system_mirror_tarball() {

        # Tarball is created in addition to standard backup due to possible difficulty
        # with longer pathnames in some environments e.g. windows and cloud backups
        # refer here for exclusions (arch wiki rsync backups)
        # https://wiki.archlinux.org/index.php/Full_system_backup_with_rsync
        # /srv is also excluded as it contains the mounted files used for
        # samba share

        Log="$LogPath/$date.ArchServerTarBackupLog.txt"
        ErrorLog="$LogPath/$date.ArchServerTarBackupErrorLog.txt"
        OS_DestinationFile=${config[OS_DestinationPath]}/$date.\
                ArchServerBackup.tar.gz


        DayOfMonth=$(date +%d)
        if [ $DayOfMonth -eq 1 ]
        then
                tar --exclude="{/dev,/proc,/sys,/tmp,/run,/srv,/mnt,/media,\
                        /lost+found}" \
                        -czpvf $OS_TarDestinationFile $OS_SourcePath \
                        >$Log 2>$ErrorLog
        fi

}





#====FUNCTION==================================================================
#       Name:           mirror_data_local
#       Description:    Create a local mirror of data drive
#       Paramaters:     None
#       Returns:        None
#==============================================================================

mirror_data_local() {

        Log="$LogPath/$date.DataMirrorBackupLog.txt"
        ErrorLog="$LogPath/$date.DataMirrorBackupErrorLog.txt"

        rsync -aAXv --delete $MirrorSourcePath $MirrorDestinationPath > \
                $Log 2> $ErrorLog

}
        




#====FUNCTION==================================================================
#       Name:           copy_data_cloud
#       Description:    Create cloud copy of data drive
#                       (never deletes files at destination)
#       Paramaters:     None
#       Returns:        None
#==============================================================================

copy_data_cloud () {

        # Timeout added to attempt to avoid exceding ISP data limits
        # Specify config file as that for user charl as this script is run by root
        # (for which no rclone config has been set up)
        
        # Smaller files < 50M
        Log="$LogPath/$date.AmazonCopyBackupLog.txt"
        ErrorLog="$LogPath/$date.AmazonCopyBackupErrorLog.txt"
        timeout 2h rclone copy --checksum -v --max-size 50M \
                --config=/home/charl/.rclone.conf --exclude-from $CloudExclusionFile \
                $CloudCopySourcePath $CloudCopyDestinationPath >$Log 2>$ErrorLog
        
        # Larger files > 50M Copy one at a time (set transfers =1)
        #Log="$LogPath/$date.AmazonCopyBackupLargeFileLog.txt"
        #ErrorLog="$LogPath/$date.AmazonCopyBackupLargeFileErrorLog.txt"
        #timeout 2h rclone copy --checksum -v --min-size 50M --transfers 1 \
                #--config=/home/charl/.rclone.conf --exclude-from $CloudExclusionFile \
                #$CloudCopySourcePath $CloudCopyDestinationPath >$Log 2>$ErrorLog
        
}





#====FUNCTION==================================================================
#       Name:           mirror_data_cloud
#       Description:    Create cloud mirror of data drive
#                       (deletes files at destination if not in source)
#       Paramaters:     None
#       Returns:        None
#==============================================================================

mirror_data_cloud () {
        # Timeout added to attempt to avoid exceding ISP data limits
        # Specify config file as that for user charl as this script is run by root 
        # (for which no rclone config has been set up)
        
        # Smaller files < 50M
        Log="$LogPath/$date.AmazonMirrorBackupLog.txt"
        ErrorLog="$LogPath/$date.AmazonMirrorBackupErrorLog.txt"
        timeout 1h rclone sync --checksum -v --max-size 50M \
                --config=/home/charl/.rclone.conf --exclude-from $CloudExclusionFile \
                $CloudMirrorSourcePath $CloudMirrorDestinationPath >$Log 2>$ErrorLog
        
        # Larger files > 50M Copy one at a time (set transfers =1)
        # Log="$LogPath/$date.AmazonMirrorBackupLargeFileLog.txt"
        # ErrorLog="$LogPath/$date.AmazonMirrorBackupLargeFileErrorLog.txt"
        # timeout 2h rclone sync --checksum -v --min-size 50M --transfers 1 \
                #--config=/home/charl/.rclone.conf --exclude-from $CloudExclusionFile \
                #$CloudMirrorSourcePath $CloudMirrorDestinationPath >$Log 2>$ErrorLog

}





#test_sub() {
#
#        # output the paramter
#        echo $1
#
#        excl_dir="${config[OS_Exclusions]}"
#
#        # replace comma seperated list wth spaces
#        excl_dir=${excl_dir//,/ }                
#
#        # Emulate brace sequence expression using an array.
#        args=()
#        for  i in $excl_dir; do
#                args+=( "$i" )
#        done
#        
#        ls "${args[@]}"
#
#  }



#==============================================================================
#
#                       Configuration Options
#
#==============================================================================

# For both standard and error logs
LogPath=/srv/samba/Documents_Charl/Computer_Technical/Logs

#Path details for mirror backup of system itself excluding data
# ***** THIS IS A MIRROR FILES IN DESTINATION NOT IN SOURCE WILL BE DELETED ***
OS_SourcePath=/
OS_DestinationPath=/srv/samba/Documents_Charl/010_EncryptForCloudBackup\
        /ArchSystemBackups/ArchServer
OS_TarDestinationPath=/srv/samba/Documents_Charl/010_EncryptForCloudBackup\
        /ArchSystemBackups/ArchServerTarballs/$date.ArchServerBackup.tar.gz


# Path details for data mirror
# There is no data copy as this is seperately taken care of by rsnapshot
# ***** THIS IS A MIRROR FILES IN DESTINATION NOT IN SOURCE WILL BE DELETED ***
MirrorSourcePath=/srv/samba/
MirrorDestinationPath=/mnt/backups/mirror_overnight

#File containing details of paths to be excluded from cloud backup
CloudExclusionFile=/srv/samba/Documents_Charl/Computer_Technical\
        /Programming_Complete/Bash/OvernightJobs/CloudBackupExclusions.txt

#Path details for cloud copy (target does not get deleted even if it is not
# in source)
CloudCopySourcePath=/srv/samba/
CloudCopyDestinationPath=AmazonDrive:Backups_Copy

#Path details for cloud source
CloudMirrorSourcePath=/srv/samba/
CloudMirrorDestinationPath=AmazonDrive:Backups_Mirror


# SPACE sperated list
# list Exclusions below are modified from Arch Wiki
# https://wiki.archlinux.org/index.php/Full_system_backup_with_rsync
OS_Exclusions="/dev /proc /sys /tmp /run /mnt /media /srv/samba/ /lost+found"



#==============================================================================
#
#                               MAIN PROGRAM
#
#==============================================================================


date=$(date "+%m%d")

# init configuration array and read and check data from config file
typeset -A config
read_config
check_config

# Read script flags and execute individual processes if flags exist
# http://wiki.bash-hackers.org/howto/getopts_tutorial
FlagsFound=0
while getopts "stlcm" opt; do
        case $opt in
        s)
                system_mirror
                FlagsFound=1
                ;;
       # t)
       #         system_mirror_tarball
       #         FlagsFound=1
       #         ;;
       # l)
       #         mirror_data_local
       #         FlagsFound=1
       #         ;;
       # c)
       #         copy_data_cloud
       #         FlagsFound=1
       #         ;;
       # m)
       #         mirror_data_cloud
       #         FlagsFound=1
       #         ;;
        \?)
                echo "Invalid option: -$OPTARG" # >&2
                exit 1
                ;;
        esac
done


# Run all scripts if no flags specified
if [ $FlagsFound -eq 0 ]; then
        echo "Run all scripts"
fi

