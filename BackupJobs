#!/bin/bash


#!!!!!!!!!!!!!!!!!!!!!!!! INCOMPLETE WORK IN PROGRESS !!!!!!!!!!!!!!!!!!!!!!!!


#==============================================================================
#
#       FILE:           BackupJobs
#
#       USAGE:
#
#       DESCRIPTION:    Runs various local, cloud and system backups
#
#       DEPENDENCIES:   rclone, rsync
#       
#       AUTHOR:         Charl Potgieter
#
#==============================================================================





#====FUNCTION==================================================================
#       Name:           read_config
#       Description:    Reads configuration from ~/.backup_overnight.conf
#       Paramaters:     None
#       Returns:        None
#==============================================================================

read_config() {

        typeset -A config # init array
        #config=( # set default values in config array
        #       [username]="root"
        #       [password]=""
        #       [hostname]="localhost"
        #)
        
        while read line
        do
                if echo $line | grep -F = &>/dev/null
                then
                        varname=$(echo "$line" | cut -d '=' -f 1)
                        config[$varname]=$(echo "$line" | cut -d '=' -f 2-)
                fi
        done < myconfig.txt
        
        echo ${config[username]} # should be loaded from config file
        echo ${config[password]} # should be loaded from config file
        echo ${config[hostname]} # includes the "injected" code, but it's fine here
        echo ${config[PROMPT_COMMAND]} # also respects variables that you may not have
                   # been looking for, but they're sandboxed inside the $config array
}





#====FUNCTION==================================================================
#       Name:           system_backup
#       Description:    Create a system mirror (excluding data)
#       Paramaters:     None
#       Returns:        None
#==============================================================================

system_mirror() {
     
# Refer here for exclusions (arch wiki rsync backups)
# https://wiki.archlinux.org/index.php/Full_system_backup_with_rsync
       
        Log="$LogPath/$date.ArchServerBackupLog.txt"
        ErrorLog="$LogPath/$date.ArchServerBackupErrorLog.txt"
        
        rsync -aAXv --delete --exclude={"/dev/*","/proc/*","/sys/*","/tmp/*",\
                "/run/*","/mnt/*","/media/*","/srv/samba/*","/lost+found"} \
                $OS_SourcePath $OS_DestinationPath >$Log 2>$ErrorLog
}





#====FUNCTION==================================================================
#       Name:           system_tarball
#       Description:    Mirror system as a tarball (excluding data)
#       Paramaters:     None
#       Returns:        None
#==============================================================================

system_mirror_tarball() {

        # Tarball is created in addition to standard backup due to possible difficulty
        # with longer pathnames in some environments e.g. windows and cloud backups
        # refer here for exclusions (arch wiki rsync backups)
        # https://wiki.archlinux.org/index.php/Full_system_backup_with_rsync
        # /srv is also excluded as it contains the mounted files used for
        # samba share

        Log="$LogPath/$date.ArchServerTarBackupLog.txt"
        ErrorLog="$LogPath/$date.ArchServerTarBackupErrorLog.txt"
        
        DayOfMonth=$(date +%d)
        if [ $DayOfMonth -eq 1 ]
        then
                tar --exclude="{/dev,/proc,/sys,/tmp,/run,/srv,/mnt,/media,\
                        /lost+found}" \
                        -czpvf $OS_TarDestinationFile $OS_SourcePath \
                        >$Log 2>$ErrorLog
        fi

}





#====FUNCTION==================================================================
#       Name:           mirror_data_local
#       Description:    Create a local mirror of data drive
#       Paramaters:     None
#       Returns:        None
#==============================================================================

mirror_data_local() {

        Log="$LogPath/$date.DataMirrorBackupLog.txt"
        ErrorLog="$LogPath/$date.DataMirrorBackupErrorLog.txt"

        rsync -aAXv --delete $MirrorSourcePath $MirrorDestinationPath > \
                $Log 2> $ErrorLog

}
        




#====FUNCTION==================================================================
#       Name:           copy_data_cloud
#       Description:    Create cloud copy of data drive
#                       (never deletes files at destination)
#       Paramaters:     None
#       Returns:        None
#==============================================================================

copy_data_cloud () {

        # Timeout added to attempt to avoid exceding ISP data limits
        # Specify config file as that for user charl as this script is run by root
        # (for which no rclone config has been set up)
        
        # Smaller files < 50M
        Log="$LogPath/$date.AmazonCopyBackupLog.txt"
        ErrorLog="$LogPath/$date.AmazonCopyBackupErrorLog.txt"
        timeout 2h rclone copy --checksum -v --max-size 50M \
                --config=/home/charl/.rclone.conf --exclude-from $CloudExclusionFile \
                $CloudCopySourcePath $CloudCopyDestinationPath >$Log 2>$ErrorLog
        
        # Larger files > 50M Copy one at a time (set transfers =1)
        #Log="$LogPath/$date.AmazonCopyBackupLargeFileLog.txt"
        #ErrorLog="$LogPath/$date.AmazonCopyBackupLargeFileErrorLog.txt"
        #timeout 2h rclone copy --checksum -v --min-size 50M --transfers 1 \
                #--config=/home/charl/.rclone.conf --exclude-from $CloudExclusionFile \
                #$CloudCopySourcePath $CloudCopyDestinationPath >$Log 2>$ErrorLog
        
}





#====FUNCTION==================================================================
#       Name:           mirror_data_cloud
#       Description:    Create cloud mirror of data drive
#                       (deletes files at destination if not in source)
#       Paramaters:     None
#       Returns:        None
#==============================================================================

mirror_data_cloud () {
        # Timeout added to attempt to avoid exceding ISP data limits
        # Specify config file as that for user charl as this script is run by root 
        # (for which no rclone config has been set up)
        
        # Smaller files < 50M
        Log="$LogPath/$date.AmazonMirrorBackupLog.txt"
        ErrorLog="$LogPath/$date.AmazonMirrorBackupErrorLog.txt"
        timeout 1h rclone sync --checksum -v --max-size 50M \
                --config=/home/charl/.rclone.conf --exclude-from $CloudExclusionFile \
                $CloudMirrorSourcePath $CloudMirrorDestinationPath >$Log 2>$ErrorLog
        
        # Larger files > 50M Copy one at a time (set transfers =1)
        # Log="$LogPath/$date.AmazonMirrorBackupLargeFileLog.txt"
        # ErrorLog="$LogPath/$date.AmazonMirrorBackupLargeFileErrorLog.txt"
        # timeout 2h rclone sync --checksum -v --min-size 50M --transfers 1 \
                #--config=/home/charl/.rclone.conf --exclude-from $CloudExclusionFile \
                #$CloudMirrorSourcePath $CloudMirrorDestinationPath >$Log 2>$ErrorLog

}


#==============================================================================
#
#
#                               MAIN PROGRAM
#
#
#==============================================================================


read_config


# Read script flags and execute individual processes if flags exist
# http://wiki.bash-hackers.org/howto/getopts_tutorial
FlagsFound=0
while getopts "stlcm" opt; do
        case $opt in
        s)
                system_mirror
                FlagsFound=1
                ;;
        t)
                system_mirror_tarball
                FlagsFound=1
                ;;
        l)
                mirror_data_local
                FlagsFound=1
                ;;
        c)
                copy_data_cloud
                FlagsFound=1
                ;;
        m)
                mirror_data_cloud
                FlagsFound=1
                ;;
        \?)
                echo "Invalid option: -$OPTARG" # >&2
                exit 1
                ;;
        esac
done


# Run all scripts if no flags specified
if [ $FlagsFound -eq "0" ]; then
          echo "Run all scripts"
fi

