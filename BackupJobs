#!/bin/bash


#!!!!!!!!!!!!!!!!!!!!!!!! INCOMPLETE WORK IN PROGRESS !!!!!!!!!!!!!!!!!!!!!!!!


#==============================================================================
#
#       FILE:           BackupJobs
#
#       USAGE:
#
#       DESCRIPTION:    Runs various local, cloud and system backups
#
#       DEPENDENCIES:   rclone, rsync
#       
#       AUTHOR:         Charl Potgieter
#
#==============================================================================

# !!!!!!!!!!!!!!!!!!!!!!!!! TO DO !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
#
# (1) Work on other subs similar to way system_mirror was completed
# (4) Move size exclusiont to configuration options
#
# !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!


#==============================================================================
#                       Configuration Options
#==============================================================================

# For both standard and error logs
LogPath=/srv/samba/Documents_Charl/Computer_Technical/Logs

#Path details for mirror backup of system itself excluding data
# ***** THIS IS A MIRROR FILES IN DESTINATION NOT IN SOURCE WILL BE DELETED ***
OS_SourcePath=/
OS_DestinationPath="/srv/samba/Documents_Charl/010_EncryptForCloudBackup\
/ArchSystemBackups/ArchServer"
OS_TarDestinationPath="/srv/samba/Documents_Charl/010_EncryptForCloudBackup\
/ArchSystemBackups/ArchServerTarballs"


# Path details for data mirror
# There is no data copy as this is seperately taken care of by rsnapshot
# ***** THIS IS A MIRROR FILES IN DESTINATION NOT IN SOURCE WILL BE DELETED ***
MirrorSourcePath=/srv/samba/
MirrorDestinationPath=/mnt/backups/mirror_overnight

#File containing details of paths to be excluded from cloud backup
CloudExclusionFile="/srv/samba/Documents_Charl/Computer_Technical\
/Programming_Complete/Bash/OvernightJobs/CloudBackupExclusions.txt"

#Path details for cloud copy (target does not get deleted even if it is not
# in source)
CloudCopySourcePath=/srv/samba/
CloudCopyDestinationPath=AmazonDrive:Backups_Copy

#Path details for cloud source
CloudMirrorSourcePath=/srv/samba/
CloudMirrorDestinationPath=AmazonDrive:Backups_Mirror


# SPACE sperated list
# list Exclusions below are modified from Arch Wiki
# https://wiki.archlinux.org/index.php/Full_system_backup_with_rsync
OS_Exclusions="/dev /proc /sys /tmp /run /mnt /media /srv/samba /lost+found"





#====FUNCTION==================================================================
#       Name:           system_mirror
#       Description:    Create a system mirror (excluding data)
#       Paramaters:     None
#       Returns:        None
#==============================================================================

system_mirror() {
     
        Log="$LogPath/$date.ArchServerBackupLog.txt"
        ErrorLog="$LogPath/$date.ArchServerBackupErrorLog.txt"

        # Create an exclusion array.  Variable expanstion takes place after
        # brace expanion so can't use a brace expansion solution
        excl_array=()
        for  i in $OS_Exclusions; do
                excl_array+=(--exclude="$i" )
        done

        
        rsync -aAXv --delete  "${excl_array[@]}" \
                $OS_SourcePath $OS_DestinationPath >$Log 2>$ErrorLog
}






#====FUNCTION==================================================================
#       Name:           system_mirror_tarball
#       Description:    Mirror system as a tarball (excluding data)
#       Paramaters:     None
#       Returns:        None
#==============================================================================

system_mirror_tarball() {

        # Tarball is created in addition to standard backup due to possible
        #  difficulty with longer pathnames in some environments e.g. windows
        # and cloud backups.
        # refer here for exclusions (arch wiki rsync backups)
        # https://wiki.archlinux.org/index.php/Full_system_backup_with_rsync
        # /srv is also excluded as it contains the mounted files used for
        # samba share

        Log="$LogPath/$date.ArchServerTarBackupLog.txt"
        ErrorLog="$LogPath/$date.ArchServerTarBackupErrorLog.txt"
        OS_TarDestinationFile=$OS_TarDestinationPath/$date.ArchServerBackup.tar.gz

        # Create an exclusion array.  Variable expanstion takes place after
        # brace expanion so can't use a brace expansion solution
        excl_array=()
        for  i in $OS_Exclusions; do
                excl_array+=(--exclude="$i")
        done

        if [ $DayOfMonth -eq 1 ]
        then
               tar "${excl_array[@]}"  -czpvf $OS_TarDestinationFile \
                       $OS_SourcePath >$Log 2>$ErrorLog
        fi

}





#====FUNCTION==================================================================
#       Name:           mirror_data_local
#       Description:    Create a local mirror of data drive
#       Paramaters:     None
#       Returns:        None
#==============================================================================

mirror_data_local() {

# (There is no data copy as this is seperately taken care of by rsnapshot)

        Log="$LogPath/$date.DataMirrorBackupLog.txt"
        ErrorLog="$LogPath/$date.DataMirrorBackupErrorLog.txt"

        rsync -aAXv --delete $MirrorSourcePath $MirrorDestinationPath > \
                $Log 2> $ErrorLog

}
        




#====FUNCTION==================================================================
#       Name:           copy_data_cloud
#       Description:    Create cloud copy of data drive
#                       (never deletes files at destination)
#       Paramaters:     None
#       Returns:        None
#==============================================================================

copy_data_cloud () {

        # Timeout added to attempt to avoid exceding ISP data limits
        # Specify config file as that for user charl as this script is run by root
        # (for which no rclone config has been set up)
        
        # Smaller files < 50M
        Log="$LogPath/$date.AmazonCopyBackupLog.txt"
        ErrorLog="$LogPath/$date.AmazonCopyBackupErrorLog.txt"
        timeout 2h rclone copy --checksum -v --max-size 50M \
                --config=/home/charl/.rclone.conf --exclude-from $CloudExclusionFile \
                $CloudCopySourcePath $CloudCopyDestinationPath >$Log 2>$ErrorLog
        
        # Larger files > 50M Copy one at a time (set transfers =1)
        #Log="$LogPath/$date.AmazonCopyBackupLargeFileLog.txt"
        #ErrorLog="$LogPath/$date.AmazonCopyBackupLargeFileErrorLog.txt"
        #timeout 2h rclone copy --checksum -v --min-size 50M --transfers 1 \
                #--config=/home/charl/.rclone.conf --exclude-from $CloudExclusionFile \
                #$CloudCopySourcePath $CloudCopyDestinationPath >$Log 2>$ErrorLog
        
}





#====FUNCTION==================================================================
#       Name:           mirror_data_cloud
#       Description:    Create cloud mirror of data drive
#                       (deletes files at destination if not in source)
#       Paramaters:     None
#       Returns:        None
#==============================================================================

mirror_data_cloud () {
        # Timeout added to attempt to avoid exceding ISP data limits
        # Specify config file as that for user charl as this script is run by root 
        # (for which no rclone config has been set up)
        
        # Smaller files < 50M
        Log="$LogPath/$date.AmazonMirrorBackupLog.txt"
        ErrorLog="$LogPath/$date.AmazonMirrorBackupErrorLog.txt"
        timeout 1h rclone sync --checksum -v --max-size 50M \
                --config=/home/charl/.rclone.conf --exclude-from $CloudExclusionFile \
                $CloudMirrorSourcePath $CloudMirrorDestinationPath >$Log 2>$ErrorLog
        
        # Larger files > 50M Copy one at a time (set transfers =1)
        # Log="$LogPath/$date.AmazonMirrorBackupLargeFileLog.txt"
        # ErrorLog="$LogPath/$date.AmazonMirrorBackupLargeFileErrorLog.txt"
        # timeout 2h rclone sync --checksum -v --min-size 50M --transfers 1 \
                #--config=/home/charl/.rclone.conf --exclude-from $CloudExclusionFile \
                #$CloudMirrorSourcePath $CloudMirrorDestinationPath >$Log 2>$ErrorLog

}









#==============================================================================
#                               MAIN PROGRAM
#==============================================================================


date=$(date "+%m%d")
DayOfMonth=$(date +%d)

# Read script flags and execute individual processes if flags exist
# http://wiki.bash-hackers.org/howto/getopts_tutorial
FlagsFound=0
while getopts "stlcm" opt; do
        case $opt in
        s)
                system_mirror
                FlagsFound=1
                ;;
        t)
                # Force DayOfMonth to 1 so tarball runs irrespective of date
                DayOfMonth=1
                system_mirror_tarball
                FlagsFound=1
                ;;
       # l)
       #         mirror_data_local
       #         FlagsFound=1
       #         ;;
       # c)
       #         copy_data_cloud
       #         FlagsFound=1
       #         ;;
       # m)
       #         mirror_data_cloud
       #         FlagsFound=1
       #         ;;
        \?)
                echo "Invalid option: -$OPTARG" # >&2
                exit 1
                ;;
        esac
done


# Run all scripts if no flags specified
if [ $FlagsFound -eq 0 ]; then
        echo "Run all scripts"
fi

